//
//  SmartReminderManager.swift
//  BebaAgua
//
//  Created by Kleyson Tavares on 27/07/25.
//

import BackgroundTasks
import Foundation
import UserNotifications

class ReminderManager {
    static let shared = ReminderManager()
    
    private init() {}

    let positiveMessages = [
        "Seu corpo agradece 仇벒잺",
        "Hora de se hidratar 游눦",
        "Um gole faz a diferen칞a!",
        "Cuide-se com um pouco de 치gua 游눛",
        "Beba 치gua e fique bem!",
        "Mais um copo, mais sa칰de!",
        "Seu corpo vai amar isso 游눥"
    ]

    func evaluateAndNotifyIfNeeded() {
        guard PersistenceController.shared.shouldSendReminder() else { return }

        let content = UNMutableNotificationContent()
        content.title = "Lembrete de Hidrata칞칚o"
        content.body = positiveMessages.randomElement() ?? "Hora de beber 치gua"
        content.sound = UNNotificationSound.default

        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        let request = UNNotificationRequest(identifier: UUID().uuidString,
                                            content: content,
                                            trigger: trigger)

        UNUserNotificationCenter.current().add(request)
    }
    
    // Agendar nova execu칞칚o
        func scheduleAppRefresh() {
            let request = BGAppRefreshTaskRequest(identifier: "com.kleysontavares.bebaagua.refresh")
            request.earliestBeginDate = Date(timeIntervalSinceNow: 15 * 60) // 15 minutos

            do {
                try BGTaskScheduler.shared.submit(request)
            } catch {
                print("Erro ao agendar BGAppRefresh: \(error)")
            }
        }

        // L칩gica da tarefa
        func handleAppRefresh(task: BGAppRefreshTask) {
            scheduleAppRefresh() // Reagenda ap칩s execu칞칚o

            let queue = OperationQueue()
            queue.maxConcurrentOperationCount = 1

            let operation = BlockOperation {
                NotificationManager.shared.evaluateSmartReminder()
            }

            task.expirationHandler = {
                queue.cancelAllOperations()
            }

            operation.completionBlock = {
                task.setTaskCompleted(success: !operation.isCancelled)
            }

            queue.addOperation(operation)
        }
}
